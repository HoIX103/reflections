What happens when you initialize a repository? Why do you need to do it?

    It will create a repository with no commit. It need to be done because
    we can't commit without creating a repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The working directory reflect all the files in specific directory, and the 
    repository contain the committed files only. The staging area is just like 
    the "transferring area", we can organise the files to be committed in the 
    staging area before we add them to the repository.
    The staging area make us easier either to organise the files to be committed and
    to commit depends on logical changes.

How can you use the staging area to make sure you have one commit per logical
change?

    After we did the changes in different files for a single logical modification
    , we put those files in the staging area, and double check it for changes made
    by command "git diff" and "git diff before committing.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    When we want to try out some experimental feature that we're not 
    sure if it would work, but we still want to have a working demo to 
    show the others what we're working on. 
    When we find out that the experimental feature is work, we can merge
    it with the current version.

How do the diagrams help you visualize the branch structure?
    
    The diagrams can help us to see the relationship between each commit,
    for exmaple, from the diagrams, we can see wether a commit is
    reachable or not.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    Merging will combine all the changes have made of two branches. We 
    represent it in the diagram the way we do because the merged commit
    now become head of the master branch, and we can reach all the commits
    of two branches throught this new head.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

    pros:
    We can avoid the bugs when there are conflicts between two versions.

    cons:
    We have to manually find out the changes made and fix it.
